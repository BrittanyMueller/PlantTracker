/*
 * (C) Copyright 2023-2024 Brittany Mueller and Larry Milne (https://www.larrycloud.ca)
 *
 * This code is distributed on "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @author: qawse3dr a.k.a Larry Milne
 * @author: BrittanyMueller
 */

syntax = "proto3";

import "google/protobuf/empty.proto";

option java_multiple_files = true;
option java_package = "planttracker.server";
package planttracker.grpc;

/*
 * App to server requests.
 */
service PlantTracker {
  rpc addPlant(PlantInfo) returns (Result);
  rpc deletePlant(PlantId) returns (Result);
  rpc updatePlant(PlantInfo) returns (Result);

  rpc getPlants(GetPlantsRequest) returns (GetPlantsResponse);
  rpc getAvailablePiSensors(google.protobuf.Empty) returns (GetAvailablePiResponse);

  rpc getPlantSensorData(GetPlantDataRequest) returns (PlantSensorDataList);
}

message GetAvailablePiResponse {
  repeated Pi piList = 1;
}
message Pi {
  int64 pid = 1;
  string name = 2;
  repeated AvailableMoistureDevice deviceList = 3;
}
// TODO refactoring naming conventions? separate Listener and Tracker?
message AvailableMoistureDevice {
  int64 id = 1;
  string name = 2;
  repeated int32 sensorPorts = 3;
}

message GetPlantDataRequest {
  uint64 plant_id = 1;
  uint64 start_date = 2;
  optional uint64 end_date = 3;
}

enum GetPlantsRequestType {
  GET_PLANT = 0;
  GET_ALL_PLANTS = 1;
  GET_PLANTS_BY_PI = 2;
}

message GetPlantsRequest {
  GetPlantsRequestType type = 1;
  optional uint64 id = 2;  // Optional, id of Pi or Plant to retrieve.
  bool fetch_images = 3;   // Whether images should be fetched with request.
}

// GPRC doesn't allow for primitive types in rpc calls so use this as a wrapper when deleting plants.
message PlantId {
  uint64 id = 1;
}

// TODO change res-> result
message GetPlantsResponse {
  Result res = 1;
  repeated PlantInfo plants = 2;
}

// TODO consider adding current sensor data
// eg. moisture, light, humidity etc.
message PlantInfo {
  uint64 id = 1;
  string name = 2;
  LightLevel light_level = 3;
  uint32 min_moisture = 4;
  uint32 min_humidity = 5;
  uint64 pid = 6;
  uint64 moisture_device_id = 7;
  uint32 sensor_port = 8;
  optional string image_url = 9;
  optional bytes image = 10;
}

enum LightLevel {
  LOW = 0;
  MED = 1;
  HIGH = 2;
}

/*
 * This service will act as a listener for plant events, as well as reporting sensors.
 * Because the PlantListener must act as a client so we don't need to deal with networking configurations for clients we
 * will do a long poll waiting for requests as they come in for the server -> client
 *
 * Main responsibilities for the listener are:
 *  1: add/remove plants/ light sensors
 *  2: requesting Live data from sensor
 *  3: setting baselines for plant light and moisture level.
 */
service PlantListener {
  rpc initialize(PlantListenerConfig) returns (InitializeResponse);

  rpc reportSensor(PlantSensorDataList) returns (Result);

  // Communication allowing for server to talk to client.
  rpc poll(PollRequest) returns (stream ListenerRequest);
}

/*
 * When connecting with the server the PlantListener will give the name and list of devices.
 * The server will initialize the pi if it doesn't exist and return a list of associated Plants.
 */
message PlantListenerConfig {
  string uuid = 1;
  string name = 2;
  repeated MoistureDevice devices = 3;
}

message PollRequest {
  string uuid = 1;
}

message Result {
  int64 return_code = 1;
  optional string error = 2;
}

// TODO change res -> result
message InitializeResponse {
  Result res = 1;
  repeated PlantSensor plants = 2;
}

message PlantSensor {
  int64 plant_id = 1;      // Serial ID generated by DB
  string device_name = 2;  // The string ID of the device
  uint32 sensor_port = 3;  // Hardware ADC port of device
  uint32 min_moisture = 4;  
  uint32 min_humidity = 5;
}

message MoistureDevice {
  string name = 1;
  uint32 num_sensors = 2;
}
message PlantSensorDataList {
  repeated PlantSensorData data = 1;
}
message PlantSensorData {
  int64 plant_id = 1;
  MoistureSensorData moisture = 2;
  LightSensorData light = 3;
  float humidity = 4;
  float temp = 5;
  optional uint64 epoch_ts = 6;  // Epoch timestamp in seconds.
}

message MoistureSensorData {
  float moisture_level = 1;  // Percent
  int32 sensor_value = 2;    // Actual sensor value 0-SENSOR_MAX
}

message LightSensorData {
  float lumens = 1;        // Best guess a lumens
  int32 sensor_value = 2;  // Actual sensor value 0-SENSOR_MAX
}

enum ListenerRequestType {
  NEW_PLANT = 0;
  DELETE_PLANT = 1;
  UPDATE_PLANT = 2;
  SHUTDOWN = 3;  // Sent when the server is about to shutdown.
}

message ListenerRequest {
  ListenerRequestType type = 1;
  oneof data {
    PlantSensor plant = 3;  // Used for Adding and updating plant
    uint64 plant_id = 4;    // used for removing plant
  }
}

/*
 * (C) Copyright 2023-2024 Brittany Mueller and Larry Milne (https://www.larrycloud.ca)
 *
 * This code is distributed on "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @author: qawse3dr a.k.a Larry Milne
 * @author: BrittanyMueller
 */

syntax = "proto3";

option java_multiple_files = true;
option java_package = "planttracker.server";
package planttracker.grpc;

/*
 * App to server requests.
 */
service PlantTracker {
  rpc AddPlant(Plant) returns (Result);
  rpc DeletePlant(PlantId) returns (Result);
  rpc UpdatePlant(Plant) returns (Result);

  rpc GetPlants(GetPlantsRequest) returns (PlantList);
  rpc GetPlantData(GetPlantDataRequest) returns (PlantDataList);
  
}

message GetPlantDataRequest {
  uint64 plant_id = 1;
  uint64 start_date = 2;
  optional uint64 end_date = 3; 
}

message GetPlantsRequest {
  // Can either be pid, plant_id, or neither to get all plants.
  optional uint64 pid = 1;
  optional uint64 plant_id = 2;
  bool fetch_images = 3;  // Whether images should be fetched with request.
}

// GPRC doesn't allow for primative types in rpc calls so use this as a wrapper when deleting plants.
message PlantId {
  uint64 id = 1;
}

message PlantList {
  repeated Plant plants = 1;
}

message Plant {
  uint64 id = 1;
  string name = 2;
  uint64 moisture_device_id = 3;
  uint32 sensor_port = 4;
  LightLevel light_level = 5;
  uint32 min_moisture = 6;
  uint32 min_humidity = 7;
  uint64 pid = 8;
  optional bytes img = 9;
}

enum LightLevel {
  LOW = 0;
  MED = 1;
  HIGH = 2;
}

/*
 * This service will act as a listener for plant events, as well as reporting sensors.
 * Because the PlantListener must act as a client so we don't need to deal with networking configurations for clients we
 * will do a long poll waiting for requests as they come in for the server -> client
 *
 * Main responsibilities for the listener are:
 *  1: add/remove plants/ light sensors
 *  2: requesting Live data from sensor
 *  3: setting baselines for plant light and moisture level.
 */
service PlantListener {
  rpc Initialize(PlantListenerConfig) returns (InitializeResponse);

  rpc ReportSensor(PlantDataList) returns (Result);

  // Duplex which will be passed back and forth with ListenerRequest holding the result of the last operation.
  // On First operation it will always be return_code 0.
  rpc PollRequest(stream ListenerResponse) returns (stream ListenerResponse);
}

/*
 * When connecting with the server the PlantListener will give the name and list of devices.
 * The server will initialize the pi if it doesn't exist and return a list of associated Plants.
 */
message PlantListenerConfig {
  string mac = 1;
  string name = 2;
  repeated MoistureDevice devices = 3;
}

message Result {
  int64 return_code = 1;
  optional string error = 2;
}

message InitializeResponse {
  Result res = 1;
  repeated PlantSensor plants = 2;
}

message PlantSensor {
  int64 plant_id = 1;      // Serial ID generated by DB
  string device_name = 2;  // The string ID of the device
  uint32 device_port = 3;  // Hardware ADC port of device
}

message MoistureDevice {
  string name = 1;
  uint32 num_sensors = 2;
}

message PlantDataList {
  repeated PlantData data = 1;
}

message PlantData {
  int64 plant_id = 1;
  MoistureSensorData moisture = 2;
  LightSensorData light = 3;
  float humidity = 4;
  float temp = 5;
  optional uint64 epoch_ts = 6; // Epoch timestamp in seconds.
}

message MoistureSensorData {
  float moisture_level = 1;  // Percent 
  int32 sensor_value = 2;     // Actual sensor value 0-SENSOR_MAX
}

message LightSensorData {
  float lumens = 1;       // Best guess a lumens
  int32 sensor_value = 2;  // Actual sensor value 0-SENSOR_MAX
}

enum ListenerRequestType {
  NewPlant = 0;
  DeletePlant = 1;
  UpdatePlant = 2;
}

message ListenerRequest {
  ListenerRequestType type = 1;
  PlantSensor plant = 2;  // Plant to be added, removed, or updated based on request type.
}

message ListenerResponse {
  Result res = 1;  // The Result of the last request.

  // The last request. optional in cases where we don't want to spend bandwidth sending the request back.
  optional ListenerRequest res_data = 2;
}
